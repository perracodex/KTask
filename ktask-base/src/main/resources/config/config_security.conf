# Copyright (c) 2024-Present Perracodex. Use of this source code is governed by an MIT license.

security {
	# When true, it enables the 'HttpsRedirect' to redirect all HTTP requests to the HTTPS counterpart
	# before processing any call, and the 'HSTS' plugin to add the required HTTP Strict Transport Security
	# headers to all the requests.
	useSecureConnection: false
	useSecureConnection: ${?KTASK_SECURITY_SECURE_CONNECTIONS}

	# WARNING: The encryption settings below are critical for data privacy and integrity.
	# Changing any of these values post-encryption will result in the inability to decrypt previously encrypted data.
	# It is imperative to establish these values PRIOR to any data input and maintain them consistently to ensure data accessibility.
	# In the event of attribute compromise, you must decrypt all affected data using the former settings before re-encrypting with
	# updated values to prevent data loss. These settings must be handled with extreme caution and have restricted access.
	encryption {
		# Encryption Algorithm Configuration.
		# "AES_256_PBE_CBC" and "AES_256_PBE_GCM" are recommended for their balance of security and performance.
		# Choices: AES_256_PBE_CBC, AES_256_PBE_GCM, BLOW_FISH, TRIPLE_DES
		algorithm: "AES_256_PBE_CBC"
		algorithm: ${?KTASK_SECURITY_ENCRYPTION_ALGORITHM}

		# Salt for Encryption.
		# Utilized by "AES_256_PBE_CBC" and "AES_256_PBE_GCM" algorithms.
		# Essential for password-based encryption to thwart dictionary attacks.
		# Must be securely generated and unique per encryption operation for optimal security.
		salt: "5c0744940b5c369b"
		salt: ${?KTASK_SECURITY_ENCRYPTION_SALT}

		# Encryption Key.
		# The secret key for data encryption. For AES-256-based encryption, this should be 32 bytes (256 bits).
		# Ensure this key is strong and securely stored; exposure compromises all encrypted data.
		key: "db82fafdbfe33a8b2bff5297de6e3a5cc15d1309664543cd376839b4d3b6b62e"
		key: ${?KTASK_SECURITY_ENCRYPTION_KEY}

		# HMAC Signature for Data Integrity.
		# Used to verify the integrity and authenticity of the data. Compromise can lead to undetected tampering.
		# Should be unique and securely stored, similar to the encryption key.
		sign: "6da315f14158bb5b986ea816cb78a329a6d1e0f724e031ca497d6b269cd8e475"
		sign: ${?KTASK_SECURITY_ENCRYPTION_SIGN}
	}

	# Constraints to be use for endpoints rate limiting.
	constraints {
		publicApi {
			# Maximum number of requests allowed for the Public API.
			# Default is 10_000 requests per second.
			limit: 10000
			limit: ${?KTASK_SECURITY_CONSTRAINTS_PUBLIC_API_LIMIT}
			refillMs: 1000 # 1 second.
			refillMs: ${?KTASK_SECURITY_CONSTRAINTS_PUBLIC_API_REFILL_MS}
		}

		privateApi {
			# Maximum number of requests allowed for the Private API.
			# Default is 10_000 requests per second.
			limit: 10000
			limit: ${?KTASK_SECURITY_CONSTRAINTS_PRIVATE_API_LIMIT}
			refillMs: 1000 # 1 second.
			refillMs: ${?KTASK_SECURITY_CONSTRAINTS_PRIVATE_API_REFILL_MS}
		}

		newToken {
			# Maximum number of requests allowed for a New Authentication Token generation.
			# Default is 1000 requests every 10 seconds.
			limit: 1000
			limit: ${?KTASK_SECURITY_CONSTRAINTS_NEW_TOKEN_LIMIT}
			refillMs: 10000 # 10 seconds.
			refillMs: ${?KTASK_SECURITY_CONSTRAINTS_NEW_TOKEN_REFILL_MS}
		}
	}
}
