openapi: "3.1.0"
info:
  title: "KTask API"
  description: "KTask API"
  version: "1.0.0"
servers:
  - url: "http://127.0.0.1:8080"
  - url: "https://127.0.0.1:8443"
paths:
  /health:
    get:
      description: "Healthcheck providing the current operational status."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/HealthCheck"
  /push/email:
    post:
      description: "Create a new scheduled Email notification task."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailTaskRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /push/slack:
    post:
      description: "Create a new scheduled Slack notification task."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SlackTaskRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /scheduler/tasks:
    delete:
      description: "Deletes all scheduler tasks."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
    get:
      description: "Gets all scheduler tasks."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TaskScheduleEntity"
  /scheduler/tasks/{name}/{group}:
    delete:
      description: "Deletes a concrete scheduler task."
      parameters:
        - name: "name"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "group"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
  /scheduler/tasks/{name}/{group}/pause:
    post:
      description: "Pause a concrete scheduler task."
      parameters:
        - name: "name"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "group"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TaskStateChangeEntity"
  /scheduler/tasks/{name}/{group}/resume:
    post:
      description: "Resume a concrete scheduled task."
      parameters:
        - name: "name"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "group"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TaskStateChangeEntity"
  /scheduler/tasks/dashboard:
    get:
      description: "The scheduler dashboard route."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ThymeleafContent"
              examples:
                Example#1:
                  description: ""
                  value:
                    template: "scheduler-dashboard"
                    model: "null"
                    etag: "null"
                    contentType: "null"
                    locale: "null"
                    fragments: "null"
  /scheduler/tasks/groups:
    get:
      description: "Gets all scheduler task groups."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  type: "string"
  /scheduler/tasks/pause:
    post:
      description: "Pauses all the scheduler tasks."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TaskStateChangeEntity"
  /scheduler/tasks/resume:
    post:
      description: "Resume all the scheduler tasks."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TaskStateChangeEntity"
  /snowflake/{id}:
    get:
      description: "Snowflake parser to read back the components of a snowflake ID."
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SnowflakeData"
components:
  schemas:
    ApplicationCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        apiSchemaEnabled:
          type: "boolean"
      required:
        - "errors"
    Datasource:
      type: "object"
      properties:
        totalConnections:
          type: "integer"
          format: "int32"
        activeConnections:
          type: "integer"
          format: "int32"
        idleConnections:
          type: "integer"
          format: "int32"
        threadsAwaitingConnection:
          type: "integer"
          format: "int32"
        connectionTimeout:
          type: "integer"
          format: "int64"
        maxLifetime:
          type: "integer"
          format: "int64"
        keepaliveTime:
          type: "integer"
          format: "int64"
        maxPoolSize:
          type: "integer"
          format: "int32"
    ConnectionTest:
      type: "object"
      properties:
        established:
          type: "boolean"
        name:
          type: "string"
        version:
          type: "string"
        dialect:
          type: "string"
        url:
          type: "string"
        vendor:
          type: "string"
        autoCommit:
          type: "boolean"
        catalog:
          type: "string"
      required:
        - "name"
        - "version"
        - "dialect"
        - "url"
        - "vendor"
        - "catalog"
    Configuration:
      type: "object"
      properties:
        poolSize:
          type: "integer"
          format: "int32"
        connectionTimeout:
          type: "integer"
          format: "int64"
        transactionRetryAttempts:
          type: "integer"
          format: "int32"
        warnLongQueriesDurationMs:
          type: "integer"
          format: "int64"
        jdbcDriver:
          type: "string"
        jdbcUrl:
          type: "string"
      required:
        - "jdbcDriver"
        - "jdbcUrl"
    DatabaseCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        alive:
          type: "boolean"
        datasource:
          $ref: "#/components/schemas/Datasource"
        connectionTest:
          $ref: "#/components/schemas/ConnectionTest"
        configuration:
          $ref: "#/components/schemas/Configuration"
        tables:
          type: "array"
          items:
            type: "string"
      required:
        - "errors"
        - "configuration"
        - "tables"
    Configured:
      type: "object"
      properties:
        protocol:
          type: "string"
        port:
          type: "integer"
          format: "int32"
        sslPort:
          type: "integer"
          format: "int32"
        host:
          type: "string"
        allowedHosts:
          type: "array"
          items:
            type: "string"
      required:
        - "protocol"
        - "host"
        - "allowedHosts"
    ServerSpec:
      type: "object"
      properties:
        serverHost:
          type: "string"
        serverPort:
          type: "integer"
          format: "int32"
        localHost:
          type: "string"
        localPort:
          type: "integer"
          format: "int32"
        remoteHostHost:
          type: "string"
        remoteAddress:
          type: "string"
        remotePort:
          type: "integer"
          format: "int32"
        httpVersion:
          type: "string"
        scheme:
          type: "string"
    DeploymentCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        configured:
          $ref: "#/components/schemas/Configured"
        serverSpec:
          $ref: "#/components/schemas/ServerSpec"
        connectors:
          type: "string"
      required:
        - "errors"
        - "configured"
        - "serverSpec"
        - "connectors"
    LocalDateTime:
      type: "object"
      properties: { }
    RuntimeCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        machineId:
          type: "integer"
          format: "int32"
        environment:
          type: "string"
          enum:
            - "DEV"
            - "PROD"
            - "STAGING"
            - "TEST"
        developmentModeEnabled:
          type: "boolean"
        utc:
          $ref: "#/components/schemas/LocalDateTime"
        local:
          $ref: "#/components/schemas/LocalDateTime"
      required:
        - "errors"
        - "environment"
        - "utc"
        - "local"
    EmailSpec:
      type: "object"
      properties:
        hostName:
          type: "string"
        smtpPort:
          type: "integer"
          format: "int32"
      required:
        - "hostName"
    SchedulerCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        totalTasks:
          type: "integer"
          format: "int32"
        email:
          $ref: "#/components/schemas/EmailSpec"
      required:
        - "errors"
        - "email"
    LimitSpec:
      type: "object"
      properties:
        limit:
          type: "integer"
          format: "int32"
        refillMs:
          type: "integer"
          format: "int64"
    SecurityCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        useSecureConnection:
          type: "boolean"
        publicApi:
          $ref: "#/components/schemas/LimitSpec"
        privateApi:
          $ref: "#/components/schemas/LimitSpec"
        newToken:
          $ref: "#/components/schemas/LimitSpec"
      required:
        - "errors"
        - "publicApi"
        - "privateApi"
        - "newToken"
    SnowflakeData:
      type: "object"
      properties:
        machineId:
          type: "integer"
          format: "int32"
        sequence:
          type: "integer"
          format: "int64"
        utc:
          $ref: "#/components/schemas/LocalDateTime"
        local:
          $ref: "#/components/schemas/LocalDateTime"
      required:
        - "utc"
        - "local"
    SnowflakeCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        testId:
          type: "string"
        testResult:
          $ref: "#/components/schemas/SnowflakeData"
        timestampEpoch:
          type: "integer"
          format: "int64"
        nanoTimeStart:
          type: "integer"
          format: "int64"
      required:
        - "errors"
    HealthCheck:
      type: "object"
      properties:
        health:
          type: "array"
          items:
            type: "string"
        application:
          $ref: "#/components/schemas/ApplicationCheck"
        database:
          $ref: "#/components/schemas/DatabaseCheck"
        deployment:
          $ref: "#/components/schemas/DeploymentCheck"
        endpoints:
          type: "array"
          items:
            type: "string"
        runtime:
          $ref: "#/components/schemas/RuntimeCheck"
        scheduler:
          $ref: "#/components/schemas/SchedulerCheck"
        security:
          $ref: "#/components/schemas/SecurityCheck"
        snowflake:
          $ref: "#/components/schemas/SnowflakeCheck"
      required:
        - "health"
        - "application"
        - "database"
        - "deployment"
        - "endpoints"
        - "runtime"
        - "scheduler"
        - "security"
        - "snowflake"
    Schedule:
      type: "object"
      properties: { }
    Recipient:
      type: "object"
      properties:
        target:
          type: "string"
        name:
          type: "string"
        language:
          type: "string"
      required:
        - "target"
        - "name"
    EmailParams:
      type: "object"
      properties:
        template:
          type: "string"
        sender:
          type: "string"
        cc:
          type: "array"
          items:
            type: "string"
        subject:
          type: "string"
        message:
          type: "string"
      required:
        - "sender"
        - "cc"
        - "subject"
    EmailTaskRequest:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        schedule:
          $ref: "#/components/schemas/Schedule"
        recipients:
          type: "array"
          items:
            $ref: "#/components/schemas/Recipient"
        params:
          $ref: "#/components/schemas/EmailParams"
      required:
        - "id"
        - "recipients"
        - "params"
    SlackParams:
      type: "object"
      properties:
        template:
          type: "string"
        sender:
          type: "string"
        channel:
          type: "string"
        message:
          type: "string"
      required:
        - "sender"
        - "channel"
    SlackTaskRequest:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        schedule:
          $ref: "#/components/schemas/Schedule"
        recipients:
          type: "array"
          items:
            $ref: "#/components/schemas/Recipient"
        params:
          $ref: "#/components/schemas/SlackParams"
      required:
        - "id"
        - "recipients"
        - "params"
    TaskScheduleEntity:
      type: "object"
      properties:
        name:
          type: "string"
        group:
          type: "string"
        className:
          type: "string"
        nextFireTime:
          $ref: "#/components/schemas/LocalDateTime"
        state:
          type: "string"
        interval:
          type: "string"
        runs:
          type: "integer"
          format: "int32"
        dataMap:
          type: "string"
      required:
        - "name"
        - "group"
        - "className"
        - "state"
        - "dataMap"
    TaskStateChangeEntity:
      type: "object"
      properties:
        totalAffected:
          type: "integer"
          format: "int32"
        alreadyInState:
          type: "integer"
          format: "int32"
        totalTasks:
          type: "integer"
          format: "int32"
    HeaderValueParam:
      type: "object"
      properties:
        name:
          type: "string"
        value:
          type: "string"
        escapeValue:
          type: "boolean"
      required:
        - "name"
        - "value"
    ContentType:
      type: "object"
      properties:
        contentType:
          type: "string"
        contentSubtype:
          type: "string"
        parameters:
          type: "array"
          items:
            $ref: "#/components/schemas/HeaderValueParam"
      required:
        - "contentType"
        - "contentSubtype"
        - "parameters"
    Locale:
      type: "object"
      properties: { }
    ThymeleafContent:
      type: "object"
      properties:
        template:
          type: "string"
        model:
          type: "string"
        etag:
          type: "string"
        contentType:
          $ref: "#/components/schemas/ContentType"
        locale:
          $ref: "#/components/schemas/Locale"
        fragments:
          type: "array"
          items:
            type: "string"
      required:
        - "template"
        - "model"
        - "contentType"
        - "locale"
        - "fragments"